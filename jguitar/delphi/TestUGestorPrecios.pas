unit TestUGestorPrecios;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, UGestorPrecios;

type
  // Test methods for class TGestorPrecios

  TestTGestorPrecios = class(TTestCase)
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBasics;
    procedure TestSimpleDiscounts;
    procedure TestSeveralDiscounts;
    procedure TestEdgeCases;
  end;

implementation

procedure TestTGestorPrecios.SetUp;
begin
  //
end;

procedure TestTGestorPrecios.TearDown;
begin
  //
end;

procedure TestTGestorPrecios.TestBasics;
begin
  CheckEquals(0, TGestorPrecios.Precios([]));
  CheckEquals(8, TGestorPrecios.Precios([0]));
  CheckEquals(8, TGestorPrecios.Precios([1]));
  CheckEquals(8, TGestorPrecios.Precios([2]));
  CheckEquals(8, TGestorPrecios.Precios([3]));
  CheckEquals(8, TGestorPrecios.Precios([4]));
  CheckEquals(8 * 2, TGestorPrecios.Precios([0, 0]));
  CheckEquals(8 * 3, TGestorPrecios.Precios([1, 1, 1]));
end;

procedure TestTGestorPrecios.TestEdgeCases;
var
  d: Double;
begin
  d := 2 * (8 * 4 * 0.8);
  CheckEquals(d, TGestorPrecios.Precios([0, 0, 1, 1, 2, 2, 3, 4]));

  d := 3 * (8 * 5 * 0.75) + 2 * (8 * 4 * 0.8);
  CheckEquals(d, TGestorPrecios.Precios([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2,
    2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4]));
end;

procedure TestTGestorPrecios.TestSeveralDiscounts;
var
  d: Double;
begin
  d := 8 + (8 * 2 * 0.95);
  CheckEquals(d, TGestorPrecios.Precios([0, 0, 1]));
  d := 2 * (8 * 2 * 0.95);
  CheckEquals(d, TGestorPrecios.Precios([0, 0, 1, 1]));
  d := (8 * 4 * 0.8) + (8 * 2 * 0.95);
  CheckEquals(d, TGestorPrecios.Precios([0, 0, 1, 2, 2, 3]));
  d := 8 + (8 * 5 * 0.75);
  CheckEquals(d, TGestorPrecios.Precios([0, 1, 1, 2, 3, 4]));
end;

procedure TestTGestorPrecios.TestSimpleDiscounts;
var
  d: Double;
begin
  d := 8 * 2 * 0.95;
  CheckEquals(d, TGestorPrecios.Precios([0, 1]));
  d := 8 * 3 * 0.9;
  CheckEquals(d, TGestorPrecios.Precios([0, 2, 4]));
  d := 8 * 4 * 0.8;
  CheckEquals(d, TGestorPrecios.Precios([0, 1, 2, 4]));
  d := 8 * 5 * 0.75;
  CheckEquals(d, TGestorPrecios.Precios([0, 1, 2, 3, 4]));
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTGestorPrecios.Suite);

end.
